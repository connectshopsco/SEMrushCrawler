<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nager.PublicSuffix</name>
    </assembly>
    <members>
        <member name="T:Nager.PublicSuffix.DomainDataStructure">
            <summary>
            Represents a tree of TLD domains
            </summary>
        </member>
        <member name="P:Nager.PublicSuffix.DomainDataStructure.Domain">
            <summary>
            The TLD Domain
            </summary>
        </member>
        <member name="P:Nager.PublicSuffix.DomainDataStructure.TldRule">
            <summary>
            The type of TLD Domain. <see cref="P:Nager.PublicSuffix.DomainDataStructure.TldRule"/>.
            </summary>
        </member>
        <member name="P:Nager.PublicSuffix.DomainDataStructure.Nested">
            <summary>
            The children of this TLD Domain
            </summary>
        </member>
        <member name="M:Nager.PublicSuffix.DomainDataStructure.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Nager.PublicSuffix.DomainDataStructure"/> for <paramref name="domain"/>.
            </summary>
            <param name="domain">The Domain.</param>
        </member>
        <member name="M:Nager.PublicSuffix.DomainDataStructure.#ctor(System.String,Nager.PublicSuffix.TldRule)">
            <summary>
            Creates a new <see cref="T:Nager.PublicSuffix.DomainDataStructure"/> for <paramref name="domain"/>.
            </summary>
            <param name="domain">The Domain.</param>
            <param name="tldRule">The type of TLD domain.</param>
        </member>
        <member name="T:Nager.PublicSuffix.DomainInfo">
            <summary>
            Domain Info
            </summary>
        </member>
        <member name="P:Nager.PublicSuffix.DomainInfo.Domain">
            <summary>
            Domain Name without the TLD<para />
            e.g. microsoft, google
            </summary>
        </member>
        <member name="P:Nager.PublicSuffix.DomainInfo.TLD">
            <summary>
            The TLD<para />
            e.g. com, net, de, co.uk
            </summary>
        </member>
        <member name="P:Nager.PublicSuffix.DomainInfo.SubDomain">
            <summary>
            The Sub Domain<para />
            e.g. www, mail
            </summary>
        </member>
        <member name="P:Nager.PublicSuffix.DomainInfo.RegistrableDomain">
            <summary>
            The Registrable Domain<para />
            e.g. microsoft.com, amazon.co.uk
            </summary>
        </member>
        <member name="P:Nager.PublicSuffix.DomainInfo.Hostname">
            <summary>
            Fully qualified hostname (FQDN)
            </summary>
        </member>
        <member name="P:Nager.PublicSuffix.DomainInfo.TLDRule">
            <summary>
            The matching public suffix Rule
            </summary>
        </member>
        <member name="M:Nager.PublicSuffix.DomainInfo.#ctor">
            <summary>
            Domain Info
            </summary>
        </member>
        <member name="M:Nager.PublicSuffix.DomainInfo.#ctor(System.String,Nager.PublicSuffix.TldRule)">
            <summary>
            Domain Info
            </summary>
            <param name="domain"></param>
            <param name="tldRule"></param>
        </member>
        <member name="T:Nager.PublicSuffix.DomainParser">
            <summary>
            Domain parser
            </summary>
        </member>
        <member name="M:Nager.PublicSuffix.DomainParser.#ctor(System.Collections.Generic.IEnumerable{Nager.PublicSuffix.TldRule},Nager.PublicSuffix.IDomainNormalizer)">
            <summary>
            Creates and initializes a DomainParser
            </summary>
            <param name="rules">The list of rules.</param>
            <param name="domainNormalizer">An <see cref="T:Nager.PublicSuffix.IDomainNormalizer"/>.</param>
        </member>
        <member name="M:Nager.PublicSuffix.DomainParser.#ctor(Nager.PublicSuffix.ITldRuleProvider,Nager.PublicSuffix.IDomainNormalizer)">
            <summary>
            Creates and initializes a DomainParser
            </summary>
            <param name="ruleProvider">A rule provider from interface <see cref="T:Nager.PublicSuffix.ITldRuleProvider"/>.</param>
            <param name="domainNormalizer">An <see cref="T:Nager.PublicSuffix.IDomainNormalizer"/>.</param>
        </member>
        <member name="M:Nager.PublicSuffix.DomainParser.#ctor(Nager.PublicSuffix.DomainDataStructure,Nager.PublicSuffix.IDomainNormalizer)">
            <summary>
            Creates a DomainParser based on an already initialzed tree.
            </summary>
            <param name="initializedDataStructure">An already initialized tree.</param>
            <param name="domainNormalizer">An <see cref="T:Nager.PublicSuffix.IDomainNormalizer"/>.</param>
        </member>
        <member name="M:Nager.PublicSuffix.DomainParser.Parse(System.Uri)">
            <inheritdoc/>
        </member>
        <member name="M:Nager.PublicSuffix.DomainParser.Parse(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Nager.PublicSuffix.DomainParser.IsValidDomain(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Nager.PublicSuffix.Extensions.DomainDataStructureExtensions">
            <summary>
            <see cref="T:Nager.PublicSuffix.DomainDataStructure"/> extension methods to create the TLD Tree.
            </summary>
        </member>
        <member name="M:Nager.PublicSuffix.Extensions.DomainDataStructureExtensions.AddRules(Nager.PublicSuffix.DomainDataStructure,System.Collections.Generic.IEnumerable{Nager.PublicSuffix.TldRule})">
            <summary>
            Add all the rules in <paramref name="tldRules"/> to <paramref name="structure"/>.
            </summary>
            <param name="structure">The structure to appened the rule.</param>
            <param name="tldRules">The rules to append.</param>
        </member>
        <member name="M:Nager.PublicSuffix.Extensions.DomainDataStructureExtensions.AddRule(Nager.PublicSuffix.DomainDataStructure,Nager.PublicSuffix.TldRule)">
            <summary>
            Add <paramref name="tldRule"/> to <paramref name="structure"/>.
            </summary>
            <param name="structure">The structure to appened the rule.</param>
            <param name="tldRule">The rule to append.</param>
        </member>
        <member name="T:Nager.PublicSuffix.FileCacheProvider">
            <summary>
            FileCacheProvider
            Write the data to a cache file in the temp directory
            </summary>
        </member>
        <member name="M:Nager.PublicSuffix.FileCacheProvider.#ctor(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            FileCacheProvider
            </summary>
            <param name="cacheFileName"></param>
            <param name="cacheTimeToLive"></param>
        </member>
        <member name="M:Nager.PublicSuffix.FileCacheProvider.IsCacheValid">
            <inheritdoc/>
        </member>
        <member name="M:Nager.PublicSuffix.FileCacheProvider.GetAsync">
            <inheritdoc/>
        </member>
        <member name="M:Nager.PublicSuffix.FileCacheProvider.SetAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Nager.PublicSuffix.FileTldRuleProvider">
            <summary>
            FileTldRuleProvider
            </summary>
        </member>
        <member name="M:Nager.PublicSuffix.FileTldRuleProvider.#ctor(System.String)">
            <summary>
            FileTldRuleProvider
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Nager.PublicSuffix.FileTldRuleProvider.BuildAsync">
            <inheritdoc/>
        </member>
        <member name="T:Nager.PublicSuffix.ICacheProvider">
            <summary>
            ICacheProvider
            </summary>
        </member>
        <member name="M:Nager.PublicSuffix.ICacheProvider.GetAsync">
            <summary>
            Get the data of the cache file
            </summary>
            <returns>Returns null if the cache has expired</returns>
        </member>
        <member name="M:Nager.PublicSuffix.ICacheProvider.SetAsync(System.String)">
            <summary>
            Create or update the cache file
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Nager.PublicSuffix.ICacheProvider.IsCacheValid">
            <summary>
            Check if the cache is still valid
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nager.PublicSuffix.IdnMappingNormalizer">
            <summary>
            IdnMappingNormalizer
            </summary>
        </member>
        <member name="T:Nager.PublicSuffix.IDomainParser">
            <summary>
            Domain parser
            </summary>
        </member>
        <member name="M:Nager.PublicSuffix.IDomainParser.Parse(System.String)">
            <summary>
            Parse the DomainInfo from <paramref name="domain"/>.
            </summary>
            <param name="domain">The domain to parse.</param>
            <returns>DomainInfo object</returns>
        </member>
        <member name="M:Nager.PublicSuffix.IDomainParser.Parse(System.Uri)">
            <summary>
            Parse the DomainInfo from <paramref name="domain"/>.
            </summary>
            <param name="domain">The domain to parse.</param>
            <returns>DomainInfo object</returns>
        </member>
        <member name="M:Nager.PublicSuffix.IDomainParser.IsValidDomain(System.String)">
            <summary>
            Checks if the <paramref name="domain"/> is valid.
            </summary>
            <param name="domain">The domain to check.</param>
            <returns>Returns <strong>true</strong> if the <paramref name="domain"/> is valid.</returns>
        </member>
        <member name="T:Nager.PublicSuffix.ITldRuleProvider">
            <summary>
            ITldRuleProvider
            </summary>
        </member>
        <member name="M:Nager.PublicSuffix.ITldRuleProvider.BuildAsync">
            <summary>
            Loads the plain text data from a source and parse the public suffix rules
            </summary>
            <returns>Returns the TldRules</returns>
        </member>
        <member name="T:Nager.PublicSuffix.ParseException">
            <summary>
            Parse Exception
            </summary>
        </member>
        <member name="P:Nager.PublicSuffix.ParseException.WinningRule">
            <summary>
            Reason of exception
            </summary>
        </member>
        <member name="P:Nager.PublicSuffix.ParseException.ErrorMessage">
            <summary>
            Reason of exception
            </summary>
        </member>
        <member name="M:Nager.PublicSuffix.ParseException.#ctor(System.String,Nager.PublicSuffix.TldRule)">
            <summary>
            Parse Exception
            </summary>
            <param name="errorMessage"></param>
            <param name="winningRule"></param>
        </member>
        <member name="P:Nager.PublicSuffix.ParseException.Message">
            <summary>
            Message
            </summary>
        </member>
        <member name="T:Nager.PublicSuffix.RuleLoadException">
            <summary>
            Rule Load Exception
            </summary>
        </member>
        <member name="P:Nager.PublicSuffix.RuleLoadException.Error">
            <summary>
            Error Message
            </summary>
        </member>
        <member name="M:Nager.PublicSuffix.RuleLoadException.#ctor(System.String)">
            <summary>
            Rule Load Exception
            </summary>
            <param name="error"></param>
        </member>
        <member name="T:Nager.PublicSuffix.TldRule">
            <summary>
            TldRule
            </summary>
        </member>
        <member name="P:Nager.PublicSuffix.TldRule.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Nager.PublicSuffix.TldRule.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="P:Nager.PublicSuffix.TldRule.LabelCount">
            <summary>
            LabelCount
            </summary>
        </member>
        <member name="P:Nager.PublicSuffix.TldRule.Division">
            <summary>
            Division
            </summary>
        </member>
        <member name="M:Nager.PublicSuffix.TldRule.#ctor(System.String,Nager.PublicSuffix.TldRuleDivision)">
            <summary>
            TldRule
            </summary>
            <param name="ruleData"></param>
            <param name="division"></param>
        </member>
        <member name="M:Nager.PublicSuffix.TldRule.ToString">
            <summary>
            ToString
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nager.PublicSuffix.TldRuleDivision">
            <summary>
            TLD Rule Division, defined by www.publicsuffix.org
            </summary>
        </member>
        <member name="T:Nager.PublicSuffix.TldRuleParser">
            <summary>
            TldRuleParser
            </summary>
        </member>
        <member name="M:Nager.PublicSuffix.TldRuleParser.ParseRules(System.String)">
            <summary>
            ParseRules
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Nager.PublicSuffix.TldRuleParser.ParseRules(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            ParseRules
            </summary>
            <param name="lines"></param>
            <returns></returns>
        </member>
        <member name="T:Nager.PublicSuffix.TldRuleType">
            <summary>
            TLD Rule type, defined by www.publicsuffix.org
            </summary>
        </member>
        <member name="T:Nager.PublicSuffix.WebTldRuleProvider">
            <summary>
            WebTldRuleProvider
            </summary>
        </member>
        <member name="P:Nager.PublicSuffix.WebTldRuleProvider.CacheProvider">
            <summary>
            Returns the cache provider
            </summary>
        </member>
        <member name="M:Nager.PublicSuffix.WebTldRuleProvider.#ctor(System.String,Nager.PublicSuffix.ICacheProvider)">
            <summary>
            WebTldRuleProvider<br/>
            Loads the public suffix definition file from a given url
            </summary>
            <param name="url"></param>
            <param name="cacheProvider">default is <see cref="T:Nager.PublicSuffix.FileCacheProvider"/></param>
        </member>
        <member name="M:Nager.PublicSuffix.WebTldRuleProvider.BuildAsync">
            <inheritdoc/>
        </member>
        <member name="M:Nager.PublicSuffix.WebTldRuleProvider.LoadFromUrlAsync(System.String)">
            <summary>
            Load the public suffix data from the given url
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
    </members>
</doc>
